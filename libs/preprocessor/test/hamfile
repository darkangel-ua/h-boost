project boost/preprocessor/test 
   : requirements =
      <warnings>on
      <include>../../..
      (<toolset>gcc-4.3.0 || <toolset>gcc-4.4.0 || 
       <toolset>gcc-4.5.0 || <toolset>gcc-4.5.2 -> <warnings>all <cxxflags>-Wno-variadic-macros)
      (<toolset>gcc-4.5.0 -> <linkflags>"-Wl,--enable-auto-import")
      (<toolset>msvc -> <warnings>all)
   ;

testing.suite preprocessor
   : sources =
      [ testing.compile-many
             sources =
              arithmetic.cpp
              array.cpp
              comparison.cpp
              control.cpp
              debug.cpp
              facilities.cpp
              iteration.cpp
              list.cpp
              logical.cpp
              punctuation.cpp
              repetition.cpp
              selection.cpp
              seq.cpp
              slot.cpp
              tuple.cpp
              variadic.cpp
           : requirements =
              (<toolset>gcc || <toolset>clang-linux -> <cxxflags>"-std=c++0x")
              (<toolset>gcc-3.4 || <toolset>gcc-4.1 || <toolset>gcc-4.2 -> <build>no)
      ]
   ;

testing.suite preprocessor_nvm
   : sources =
      [ testing.compile-many
             name-template =
              "${name}_nvm"
           : sources =
              arithmetic.cpp
              array.cpp
              comparison.cpp
              control.cpp
              debug.cpp
              facilities.cpp
              iteration.cpp
              list.cpp
              logical.cpp
              repetition.cpp
              selection.cpp
              seq.cpp
              slot.cpp
              tuple.cpp
           : requirements =
              <define>"BOOST_PP_VARIADICS=0"
              <use>(^boost/preprocessor)
      ]
   ;

testing.suite preprocessor_c
   : sources =
      [ testing.compile-many
             name-template =
              "${name}_c"
           : sources =
              arithmetic.c
              array.c
              comparison.c
              control.c
              debug.c
              facilities.c
              list.c
              logical.c
              punctuation.c
              selection.c
              seq.c
              slot.c
              tuple.c
              variadic.c
           : requirements =
              <use>(^boost/preprocessor)
              (<toolset>gcc || <toolset>clang-linux -> <cflags>"-std=c99")
      ]
   ;

testing.suite preprocessor_c_nvm
   : sources =
      [ testing.compile-many
             name-template =
              "${name}_c_nvm"
           : sources =
              arithmetic.c
              array.c
              comparison.c
              control.c
              debug.c
              facilities.c
              list.c
              logical.c
              selection.c
              seq.c
              slot.c
              tuple.c
           : requirements =
              <use>(^boost/preprocessor)
              (<toolset>gcc || <toolset>clang-linux -> <cflags>"-std=c99" <define>"BOOST_PP_VARIADICS=0")
      ]
   ;

testing.suite preprocessor_isempty
   : sources =
      [ testing.compile isempty.cpp ]
      [ testing.compile-fail isempty_variadic_standard_failure.cpp ]
      [ testing.compile-fail isempty_variadic_standard_failure2.cpp ]
   : common-requirements =
      <use>(^boost/preprocessor)
      (<toolset>gcc || <toolset>clang-linux -> <cxxflags>"-std=c++0x")
      (<toolset>gcc-3.4 || <toolset>gcc-4.1 || <toolset>gcc-4.2 -> <build>no)
   ;
  
testing.suite preprocessor_isempty_nvm
   : sources =
      [ testing.compile name = isempty_nvm : sources = isempty.cpp : requirements = <define>"BOOST_PP_VARIADICS=0" <use>(^boost/preprocessor) ]
   ;

testing.suite preprocessor_isempty_c
   : sources =
      [ testing.compile isempty.c : name = isempty_c ]
      [ testing.compile-fail isempty_variadic_standard_failure.c : name = isempty_variadic_standard_failure_c ]
      [ testing.compile-fail isempty_variadic_standard_failure2.c : name = isempty_variadic_standard_failure2_c ]
   : common-requirements =
      (<toolset>gcc || <toolset>clang-linux -> <cxxflags>"-std=c++0x")
      <use>(^boost/preprocessor)
   ;

testing.suite preprocessor_isempty_c_nvm
   : sources =
      [ testing.compile
             name =
              isempty_c_nvm
           : sources =
              isempty.c
           : requirements =
              <define>"BOOST_PP_VARIADICS=0"
              <use>(^boost/preprocessor)
              (<toolset>gcc || <toolset>clang-linux -> <cflags>"-std=c99")
        ]
   ;

testing.suite preprocessor_config
   : sources =
      [ testing.run config_info.cpp ^boost/preprocessor ]
   ;

project boost/mp11/tests
   : requirements = 
#     [ requires cxx11_variadic_templates cxx11_template_aliases cxx11_decltype cxx11_hdr_tuple ] 
   ;

# include-only
testing.compile mp11.cpp : requirements = <use>(/boost/mp11/<version>1.67.0) ;

# list
testing.run-many
     sources =
      mp_size.cpp
      mp_empty.cpp
      mp_front.cpp
      mp_pop_front.cpp
      mp_second.cpp
      mp_third.cpp
      mp_push_front.cpp
      mp_push_back.cpp
      mp_rename.cpp
      mp_append.cpp
      mp_append_2.cpp
      mp_replace_front.cpp
      mp_replace_second.cpp
      mp_replace_third.cpp
      mp_apply_q.cpp
      mp_is_list.cpp
      mp_list_c.cpp
   : common-sources =
      /boost/mp11/<version>1.67.0
   ;

# algorithm
testing.run-many
     sources =
      mp_assign.cpp
      mp_clear.cpp
      mp_transform.cpp
      mp_transform_q.cpp
      mp_transform_sf.cpp
      mp_transform_if.cpp
      mp_transform_if_q.cpp
      mp_fill.cpp
      mp_count.cpp
      mp_count_if.cpp
      mp_count_if_q.cpp
      mp_contains.cpp
      mp_repeat.cpp
      mp_product.cpp
      mp_drop.cpp
      mp_iota.cpp
      mp_at.cpp
      mp_at_sf.cpp
      mp_take.cpp
      mp_replace.cpp
      mp_replace_if.cpp
      mp_replace_if_q.cpp
      mp_copy_if.cpp
      mp_copy_if_q.cpp
      mp_remove.cpp
      mp_remove_if.cpp
      mp_remove_if_q.cpp
      mp_partition.cpp
      mp_partition_q.cpp
      mp_sort.cpp
      mp_sort_q.cpp
      mp_find.cpp
      mp_find_if.cpp
      mp_find_if_q.cpp
      mp_reverse.cpp
      mp_fold.cpp
      mp_fold_q.cpp
      mp_reverse_fold.cpp
      mp_reverse_fold_q.cpp
      mp_unique.cpp
      mp_all_of.cpp
      mp_all_of_q.cpp
      mp_any_of.cpp
      mp_any_of_q.cpp
      mp_none_of.cpp
      mp_none_of_q.cpp
      mp_replace_at.cpp
      mp_replace_at_c.cpp
      mp_for_each.cpp
      mp_insert.cpp
      mp_erase.cpp
      mp_with_index.cpp
      mp_with_index_cx.cpp
      mp_from_sequence.cpp
      mp_min_element.cpp
      mp_min_element_q.cpp
      mp_max_element.cpp
      mp_max_element_q.cpp
      mp_nth_element.cpp
      mp_nth_element_q.cpp
   : common-sources =
      /boost/mp11/<version>1.67.0
   ;

# integral
testing.run integral.cpp /boost/mp11/<version>1.67.0 ;

# utility
testing.run-many
     sources =
      mp_identity.cpp
      mp_inherit.cpp
      mp_if.cpp
      mp_if_sf.cpp
      mp_eval_if.cpp
      mp_eval_if_sf.cpp
      mp_valid.cpp
      mp_defer.cpp
      mp_quote.cpp
      mp_invoke.cpp
      mp_invoke_sf.cpp
      mp_quote_trait.cpp
      mp_cond.cpp
      mp_cond_sf.cpp
   : common-sources =
      /boost/mp11/<version>1.67.0
   ;

# integer_sequence
testing.run integer_sequence.cpp /boost/mp11/<version>1.67.0 ;

# tuple
testing.run-many
     sources =
      tuple_for_each.cpp
      tuple_apply.cpp
      construct_from_tuple.cpp
   : common-sources =
      /boost/mp11/<version>1.67.0
   ;
#testing.compile-many
#     sources =
#      tuple_for_each_cx.cpp
#      tuple_apply_cx.cpp
#      construct_from_tuple_cx.cpp
#   : requirements =
#      <use>(/boost/mp11/<version>1.67.0)
#   ;

# set
testing.run-many 
     sources =
      mp_set_contains.cpp
      mp_set_push_back.cpp
      mp_set_push_front.cpp
      mp_is_set.cpp
   : common-sources =
      /boost/mp11/<version>1.67.0
   ;

# function
testing.run-many 
     sources =
      mp_all.cpp
      mp_and.cpp
      mp_any.cpp
      mp_or.cpp
      mp_same.cpp
      mp_plus.cpp
      mp_less.cpp
      mp_min.cpp
      mp_max.cpp
   : common-sources =
      /boost/mp11/<version>1.67.0
   ;

# map
testing.run-many 
     sources =
      mp_map_find.cpp
      mp_map_contains.cpp
      mp_map_insert.cpp
      mp_map_replace.cpp
      mp_map_erase.cpp
      mp_map_update.cpp
      mp_map_update_q.cpp
      mp_map_keys.cpp
      mp_is_map.cpp
   : common-sources =
      /boost/mp11/<version>1.67.0
   ;
    
# bind
testing.run-many 
     sources =
      mp_bind.cpp
      mp_bind_q.cpp
      mp_bind_front.cpp
      mp_bind_back.cpp
   : common-sources =
      /boost/mp11/<version>1.67.0
   ;

# mpl
testing.run mpl.cpp /boost/mp11/<version>1.67.0 ;

# quick (for CI)
explicit
alias quick : mp11 mp_size ;
